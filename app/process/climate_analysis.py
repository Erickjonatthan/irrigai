import numpy as np

def categoria_climatica(index):
    if index >= 0.65:
        return 'Humid'
    elif index >= 0.5:
        return 'Subhumid'
    elif index >= 0.2:
        return 'Semiarid'
    elif index >= 0.05:
        return 'Arid'
    else:
        return 'Hyperarid'

def risco_desertificacao(ai):
    if ai < 0.05:
        return "Above Very High (AVH)"
    elif 0.05 <= ai <= 0.20:
        return "Very High (VH)"
    elif 0.21 <= ai <= 0.50:
        return "High (H)"
    elif 0.51 <= ai <= 0.65:
        return "Moderate (M)"
    else:
        return "Low (L)"

def recomendar_irrigacao(cultura, estagio, dados_ET, dados_PET, dados_precipitacao, anos):
    """
    Fornece recomenda√ß√µes de irriga√ß√£o em linguagem acess√≠vel com base nos dados m√©dios mensais.
    """
    import pandas as pd

    # Prints para depura√ß√£o
    print("=== Depura√ß√£o: Dados de Entrada ===")
    print(f"Dados ET recebidos:\n{dados_ET}")
    print(f"Dados PET recebidos:\n{dados_PET}")
    print(f"Dados de precipita√ß√£o recebidos:\n{dados_precipitacao}")
    print(f"Anos recebidos:\n{anos}")

    cultura = cultura.lower()
    estagio = estagio.lower()
    
    kc_values = {
        "milho": {"inicial": 0.4, "medio": 1.2, "final": 0.5},
        "feijao": {"inicial": 0.3, "medio": 1.1, "final": 0.6},
        "tomate": {"inicial": 0.6, "medio": 1.15, "final": 0.8},
        "cana-de-acucar": {"inicial": 0.5, "medio": 1.25, "final": 0.9}
    }

    if cultura not in kc_values or estagio not in kc_values[cultura]:
        raise ValueError("Cultura ou est√°gio inv√°lido")

    kc = kc_values[cultura][estagio]
    print(f"Kc selecionado para {cultura} no est√°gio {estagio}: {kc}")

    # Criar DataFrame com os dados
    df = pd.DataFrame({
        "Ano": anos,
        "ET": dados_ET,
        "PET": dados_PET,
        "Precipitacao": dados_precipitacao
    })

    # Adicionar coluna de m√™s
    df['Mes'] = (df.index % 12) + 1

    print("=== DataFrame Inicial ===")
    print(df)

    # Calcular a m√©dia mensal ao longo de todos os anos
    resumo = df.groupby('Mes').mean()
    print("=== Resumo Mensal (M√©dia) ===")
    print(resumo)

    mensagens = []
    nomes_meses = {
        1: "Janeiro", 2: "Fevereiro", 3: "Mar√ßo", 4: "Abril", 5: "Maio", 6: "Junho",
        7: "Julho", 8: "Agosto", 9: "Setembro", 10: "Outubro", 11: "Novembro", 12: "Dezembro"
    }

    for mes, linha in resumo.iterrows():
        pet = linha["PET"]
        et = linha["ET"]
        prec = linha["Precipitacao"]
        etc = pet * kc
        deficit = etc - prec

        # Print dos c√°lculos intermedi√°rios
        print(f"M√™s: {nomes_meses[mes]}, PET: {pet}, ET: {et}, Precipita√ß√£o: {prec}, ETC: {etc}, D√©ficit: {deficit}")

        if deficit > 0:
            msg = (
                f"üìÖ {nomes_meses[mes]} (m√©dia de {anos.min()} a {anos.max()}): Sua PET m√©dia foi de {pet:.1f} mm. "
                f"Como sua cultura √© {cultura} no est√°gio {estagio} (Kc = {kc}), "
                f"a planta precisa de aproximadamente {etc:.1f} mm. "
                f"A precipita√ß√£o foi de {prec:.1f} mm, resultando em um d√©ficit de {deficit:.1f} mm. "
                f"üíß Recomendado realizar irriga√ß√£o nesse m√™s."
            )
        else:
            msg = (
                f"üìÖ {nomes_meses[mes]} (m√©dia de {anos.min()} a {anos.max()}): PET m√©dia de {pet:.1f} mm e precipita√ß√£o de {prec:.1f} mm. "
                f"N√£o h√° d√©ficit h√≠drico significativo ‚Äî irriga√ß√£o provavelmente n√£o necess√°ria."
            )
        mensagens.append(msg)

    return mensagens

def calcular_e_classificar_indices_aridez(_balanco, _ano_inicial, _ano_final):
    """
    Calcula os √≠ndices de aridez, realiza classifica√ß√µes e imprime os resultados.
    """
    # C√°lculo de m√©dias e classifica√ß√µes
    indice_aridez_medio = _balanco["Indice de Aridez UNEP"].mean()
    z = np.polyfit(_balanco["Ano"], _balanco["Indice de Aridez UNEP"], 1)
    p = np.poly1d(z)
    indice_aridez_tendencia = p(_balanco["Ano"]).mean()
    indice_aridez_atual = _balanco.iloc[-1]["Indice de Aridez UNEP"]

    print(f"Essa regi√£o est√° classificada atualmente como sendo uma regi√£o {indice_aridez_atual:.2f}, "
          f"o que lhe classifica como uma regi√£o {categoria_climatica(indice_aridez_atual)}")
    print(f"Entre os anos de {_ano_inicial} e {_ano_final}, a regi√£o teve um √≠ndice m√©dio de {indice_aridez_tendencia:.2f}, "
          f"o que lhe classifica como uma regi√£o {categoria_climatica(indice_aridez_tendencia)}")
    print(f"A chance de desertifica√ß√£o da regi√£o est√° classificada como {risco_desertificacao(indice_aridez_tendencia)}")

    # Compara√ß√£o de √≠ndices de aridez
    _balanco["Aridez2"] = _balanco["ET"] / _balanco["PET"]
    indice_aridez2_medio = _balanco["Aridez2"].mean()
    print(f"Comparando os 2 √≠ndices para verificar equival√™ncia {indice_aridez_medio:.2f} ~= {indice_aridez2_medio:.2f}")